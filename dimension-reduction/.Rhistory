plot(ecdf(runif(200)), verticals=TRUE, do.points=FALSE, add=TRUE)
plot(0:4, dbinom(0:4, 4, 0.2), type="h")
n <- 10
usamp <- runif(n); usamp
xsamp <- findInterval(usamp, pbinom(0:4,4,0.2)); xsamp
curve(pbinom(x,4,0.2),-0.1,4.1,type="s",col=2)
plot(ecdf(xsamp),verticals=TRUE,do.points=FALSE,add=TRUE)
n <- 10
usamp <- runif(n); usamp
xsamp <- findInterval(usamp, pbinom(0:4,4,0.2)); xsamp
xsamp = rbinom(10, p=0.2)
xsamp = rbinom(10, 4, 0.2)
xsamp = rbinom(10, 4, 0.2)
curve(pbinom(x,4,0.2),-0.1,4.1,type="s",col=2)
plot(ecdf(xsamp),verticals=TRUE,do.points=FALSE,add=TRUE)
n <- 10
usamp <- runif(n); usamp
xsamp <- findInterval(usamp, pbinom(0:4,4,0.2)); xsamp
curve(pbinom(x,4,0.2),-0.1,4.1,type="s",col=2)
plot(ecdf(xsamp),verticals=TRUE,do.points=FALSE,add=TRUE)
xsamp = rbinom(10, 4, 0.2)
curve(pbinom(x,4,0.2),-0.1,4.1,type="s",col=2)
plot(ecdf(xsamp),verticals=TRUE,do.points=FALSE,add=TRUE)
n <- 10
usamp <- runif(n); usamp
xsamp <- findInterval(usamp, pbinom(0:4,4,0.2)); xsamp
plot(0:4, dbinom(0:4, 4, 0.2), type="h")
n <- 10
usamp <- runif(n); usamp
pbinom(0:4,4,0.2)
xsamp <- findInterval(usamp, pbinom(0:4,4,0.2)); xsamp
curve(pbinom(x,4,0.2),-0.1,4.1,type="s",col=2)
plot(ecdf(xsamp),verticals=TRUE,do.points=FALSE,add=TRUE)
# (c) Simulate X1, X2, ..., X10 using rnorm and calculate the mean value xmean. Use a for
# loop to create a vector xmean of length 100 (“100 replicates”). Each element is the mean
# of ten N(50, 5^2) random numbers.
xmean <- rep(NA, 100)
for (i in 1:100) xmean[i] <- mean(rnorm(n, mean=mu, sd=sigma))
n = 10
mu = 50 # mean
sigma = 5 # standard deviation
# actual value (see SC_VL10_Skript.pdf, p. 12):
# X.bar ~ N(mu, sigma^2/n)
sigma.bar <- sigma/sqrt(n)
# (b) Use pnorm to calculate the probability that P(X.bar <= 55)
pnorm(55, mean=mu, sd=sigma.bar)
# (c) Simulate X1, X2, ..., X10 using rnorm and calculate the mean value xmean. Use a for
# loop to create a vector xmean of length 100 (“100 replicates”). Each element is the mean
# of ten N(50, 5^2) random numbers.
xmean <- rep(NA, 100)
for (i in 1:100) xmean[i] <- mean(rnorm(n, mean=mu, sd=sigma))
# (d) Calculate the proportion of replicates that are <= 55
# and compare this with your theoretical answer in part b
sum(xmean<=55)/length(xmean)
# (b) Use pnorm to calculate the probability that P(X.bar <= 55)
pnorm(55, mean=mu, sd=sigma.bar)
# (f) Compare this with the theoretical cdf.
curve(pnorm(x,mu,sigma.bar),45,55,col=2)
plot(ecdf(xmean),verticals=TRUE,do.points=FALSE,add=TRUE)
# (a) Repeat Exercise 3 parts (c) and (f) but using a U[0; 1] as the population distribution.
n <- 10
umean <- rep(NA, 100)
for (i in 1:100) umean[i] <- mean(runif(n))
curve(punif(x),-0.1,1.1,col=2)
plot(ecdf(umean),verticals=TRUE,do.points=FALSE,add=TRUE)
n <- 30
mu <- 0.5 # mean
sigma <- sqrt(1/12) # standard deviation
xmean <- rep(0, 100)
for (i in 1:100) xmean[i] <- mean(runif(n))
# plot the empirical distribution function of xmean.
plot(ecdf(xmean), verticals=TRUE, do.points=FALSE)
# compare this with the theoretical cdf.
curve(pnorm(x,mu,sigma/sqrt(30)),0.3,0.7,col=2)
plot(ecdf(xmean),verticals=TRUE,do.points=FALSE,add=TRUE)
# (a) Simulate n = 100 replications of a B(m, 0.25) distribution with m = 10.
samp = rbinom(100, size=10, prob=0.25); samp
# (b) Plot the resulting ecdf and the cdf of the N(µ, σ^2) distribution.
curve(pnorm(x,10*0.25,sqrt(10*0.25*0.75)),-0.5,6.5,col=2)
plot(ecdf(samp),verticals=TRUE,do.points=FALSE,add=TRUE)
# (b) Plot the resulting ecdf and the cdf of the N(µ, σ^2) distribution.
curve(pnorm(x,10*0.25,sqrt(10*0.25*0.75)),-0.5,6.5,col=2)
plot(ecdf(samp),verticals=TRUE,do.points=FALSE,add=TRUE)
m <- 20
samp <- rbinom(100, size=m, prob=0.25)
curve(pnorm(x,m*0.25,sqrt(m*0.25*0.75)),-0.5,6.5,col=2)
plot(ecdf(samp),verticals=TRUE,do.points=FALSE,add=TRUE)
m <- 50
samp <- rbinom(100, size=m, prob=0.25)
curve(pnorm(x,m*0.25,sqrt(m*0.25*0.75)),-0.5,2*m*0.25,col=2)
plot(ecdf(samp),verticals=TRUE,do.points=FALSE,add=TRUE)
m <- 100
samp <- rbinom(100, size=m, prob=0.25)
curve(pnorm(x,m*0.25,sqrt(m*0.25*0.75)),-0.5,2*m*0.25,col=2)
plot(ecdf(samp),verticals=TRUE,do.points=FALSE,add=TRUE)
m <- 200
samp <- rbinom(100, size=m, prob=0.25)
curve(pnorm(x,m*0.25,sqrt(m*0.25*0.75)),-0.5,2*m*0.25,col=2)
plot(ecdf(samp),verticals=TRUE,do.points=FALSE,add=TRUE)
# (c) Use pnorm(k) and pnorm(-k) in R to calculate the probability in part (b).
pnorm(74, mean=mu, sd=sigma.x.bar)
pnorm(76, mean=mu, sd=sigma.x.bar)
mu <- 75
sigma <- sqrt(85)
# Answer: because the 50 years can be any 50 years in history,
# this is the sample size n of the sampling distribtution
sigma.x.bar = sigma/sqrt(50)
# (c) Use pnorm(k) and pnorm(-k) in R to calculate the probability in part (b).
pnorm(74, mean=mu, sd=sigma.x.bar)
pnorm(76, mean=mu, sd=sigma.x.bar)
pnorm(76, mean=mu, sd=sigma.x.bar) - pnorm(74, mean=mu, sd=sigma.x.bar)
pnorm(c(74,76), mean=mu, sd=sigma.x.bar)
qt(0.95, 8) # degrees of freedom = n-1 (always)
qt(0.95, 16) # degrees of freedom = n-1 (always)
qt(0.975, 19)
qt(0.95, 19)
qt(0.025, 19)
x.mean <- 998.6
sd.x <- 2.251
n <- 20
mu <- 1000
t.stat <- (x.mean-mu) / sd.x * sqrt(n); t.stat
alpha <- 0.05
t.critical <- qt(1-alpha/2, n-1); t.critical
1-alpha/2
qt(0.025, n-1)
x.mean-t.critical*sd.x/sqrt(n)
x.mean+t.critical*sd.x/sqrt(n)
lower.ci.bound = x.mean-t.critical*sd.x/sqrt(n); lower.ci.bound
upper.ci.bound = x.mean+t.critical*sd.x/sqrt(n); upper.ci.bound
alpha <- 0.01
t.critical = qt(1-alpha/2, n-1); t.critical
x.mean-t.critical*sd.x/sqrt(n)
x.mean+t.critical*sd.x/sqrt(n)
lower.ci.bound = x.mean-t.critical*sd.x/sqrt(n); lower.ci.bound
upper.ci.bound = x.mean+t.critical*sd.x/sqrt(n); upper.ci.bound
alpha <- 0.01
t.critical = qt(1-alpha/2, n-1); t.critical
lower.ci.bound = x.mean-t.critical*sd.x/sqrt(n); lower.ci.bound
upper.ci.bound = x.mean+t.critical*sd.x/sqrt(n); upper.ci.bound
A <- cbind( c(1,-4), c(-2,3))   ## matrix
V <- cbind( c(-1,2), c(1,1))    ## eigenvectors, not normalized
A
V
A.diag <- solve(V) %*% A %*% V  ## diagonalization
solve(V)
V %*% solve(V)
V
solve(V)
V * solve(V)
A.diag
V %*% A.diag %*% solve(V)       ## transform back
## now with the R internal function eigen
eigen(A)
curve(dhyper(x,m=49,n=7,k=7))
curve(dhyper(x,m=49,n=7,k=1))
curve(dhyper(x,m=49,n=7,k=1))
curve(dhyper(x,m=7,n=49,k=1))
curve(dhyper(x,m=500,n=50,k=100))
curve(dhyper(x,m=500,n=100,k=50))
warnings()
curve(dpois(5))
curve(dpois (5))
curve(dpois(x,5))
curve(dpois(x,5), -100, 100)
curve(dpois(x,5), -1, 10)
curve(dpois(x,5), -1, 100)
curve(dpois(x,5), -10, 10)
curve(dpois(x,5), -10, 10, n=1000)
curve(dpois(x,5), -10, 100, n=1000)
plot(dpois(1:10,5), -10, 10)
plot(dpois(1:10,5))
plot(dpois(-10:10,5))
plot(dpois(-10:20,5))
plot(dpois(-10:20,6))
plot(dpois(-10:20,4))
plot(dpois(-10:20,5))
plot(dhyper(1:10,m=49,n=7,k=1))
plot(dhyper(1:100,m=49,n=7,k=1))
plot(dhyper(1:1000,m=49,n=7,k=1))
plot(dhyper(1:100000,m=49,n=7,k=1))
plot(dhyper(1:100000,m=49,n=7,k=7))
plot(dhyper(1:1000,m=49,n=7,k=7))
plot(dhyper(1:1000,m=7,n=49,k=7))
plot(dhyper(1:100,m=7,n=49,k=7))
plot(dhyper(-10:10,m=49,n=7,k=7))
plot(dhyper(0:10,m=49,n=7,k=7))
plot(dhyper(0:10,m=7,n=49,k=7))
plot(dhyper(0:10,m=49,n=7,k=100))
plot(dhyper(0:10,m=49,n=7,k=49))
plot(dhyper(0:10,m=49,n=7,k=1))
plot(dhyper(0:10,m=49,n=7,k=7))
plot(dhyper(0:10,m=6,n=43,k=6))
plot(dhyper(0:10,m=43,n=6,k=6))
plot(dpois(-10:20,5))
x=-10:20
plot(dpois(x,5))
plot(dpois(x,5),-10,20)
plot(x,dpois(x,5))
plot(x,dhyper(0:10,m=6,n=43,k=6))
x=0:10
plot(x,dhyper(0:10,m=6,n=43,k=6))
x=-10:10
plot(x,dhyper(x,m=6,n=43,k=6))
plot(x,dhyper(x,m=43,n=6,k=6))
plot(x,dpois(x,5))
plot(x,dgeom(x,0.2))
plot(x,dgeom(x,0.2))
plot(x,dgeom(x,0.9))
plot(x,dgeom(x,1.1))
plot(x,dgeom(x,0.1))
plot(x,dgeom(x,0.5))
plot(x,dgeom(x,0.9))
x=0:20
plot(x,dgeom(x,0.1))
plot(x,dgeom(x,0.5))
x=-1:20
x=-2:20
plot(x,dgeom(x,0.1))
x=-1:20
plot(x,dgeom(x,0.1))
plot(x,dgeom(x,0.5))
plot(x,dgeom(x,0.9))
x=-10:20
plot(x,dpois(x,1))
plot(x,dpois(x,5))
plot(x,dpois(x,9))
plot(x,dpois(x,5))
plot(x,dpois(x,9))
plot(x,dpois(x,1))
plot(x,dhyper(x,m=6,n=43,k=6))
x=-10:10
plot(x,dhyper(x,m=6,n=43,k=6))
plot(x,dhyper(x,m=43,n=6,k=6))
choose(4,3)
choose(4,1:4)
plot(x,dpois(x,1))
x=seq(-5,20,by=0.01)
plot(x,dpois(x,1))
x=seq(-5,20,by=0.01)
plot(x,dpois(x,1))
x=seq(0,20,by=0.01)
plot(x,dpois(x,1))
x=seq(0,20,by=1)
plot(x,dpois(x,1))
x=seq(0,20,by=0.1)
plot(x,dpois(x,1))
x=-5:20
plot(x,dpois(x,1))
df[,df$Init==1]
df <- data.frame(
Obs=1:6,
X1=c(1,1,0,5,6,4),
X2=c(4,3,4,1,2,0),
Init=c(1,2,1,2,1,2)
)
df[,3]
df$Init
df$Init[df$Init==1]
df[df$Init==1]
df[df$Init==1, ]
df$Init[df$Init==1]
df$X1[df$Init==1]
centroid1 = c(mean(df$X1[df$Init==1]),
mean(df$X2[df$Init==1]))
centroid2 = c(mean(df$X1[df$Init==2]),
mean(df$X2[df$Init==2]))
df$X1 - 1
df$X1 - centroid1(1)
centroid1 = c(mean(df$X1[df$Init==1]),
mean(df$X2[df$Init==1]))
centroid2 = c(mean(df$X1[df$Init==2]),
mean(df$X2[df$Init==2]))
df$X1 - centroid1(1)
df$X1 - centroid1[1]
df$X1 - centroid1[1]
df$X2 - centroid1[2]
df$X1 - centroid2[1]
df$X2 - centroid2[2]
(df$X1 - centroid1[1])^2
sq.euclid.dist = sum( (df$X1 - centroid1[1])^2 )
df$dist1 <- (df$X1 - centroid1[1])^2 + (df$X2 - centroid1[2])^2
df$dist2 <- (df$X1 - centroid2[1])^2 + (df$X2 - centroid2[2])^2
View(df)
df$clust <- 0
if (df$dist1 < df$dist2) {
df$clust <- 1 }
else {
df$clust <- 2 }
if (df$dist1 < df$dist2) {
df$clust <- 1
} else {
df$clust <- 2 }
df$clust <- ifelse(df$clust1 < df$clust2, 1, 2)
View(df)
df <- data.frame(
Obs=1:6,
X1=c(1,1,0,5,6,4),
X2=c(4,3,4,1,2,0),
Init=c(1,2,1,2,1,2)
)
df[df$Init==1, ]
centroid1 <- c(mean(df$X1[df$Init==1]),
mean(df$X2[df$Init==1]))
centroid2 <- c(mean(df$X1[df$Init==2]),
mean(df$X2[df$Init==2]))
df$dist1 <- (df$X1 - centroid1[1])^2 + (df$X2 - centroid1[2])^2
df$dist2 <- (df$X1 - centroid2[1])^2 + (df$X2 - centroid2[2])^2
df$clust <- ifelse(df$clust1 < df$clust2, 1, 2)
df$clust <- ifelse(df$dist1 < df$dist2, 1, 2)
df$clust <- df$Init
df$clust <- ifelse(df$dist1 < df$dist2, 1, 2)
centroid1 <- c(mean(df$X1[df$clust==1]),
mean(df$X2[df$clust==1]))
centroid2 <- c(mean(df$X1[df$clust==2]),
mean(df$X2[df$clust==2]))
df$dist1 <- (df$X1 - centroid1[1])^2 + (df$X2 - centroid1[2])^2
df$dist2 <- (df$X1 - centroid2[1])^2 + (df$X2 - centroid2[2])^2
df$clust <- ifelse(df$dist1 < df$dist2, 1, 2)
plot(df$X1, df$X2)
plot(df$X1, df$X2, col=df$clust)
plot(df$X1, df$X2, type="p", col=df$clust)
plot(df$X1, df$X2, col=df$clust)
df <- data.frame(
Obs=1:6,
X1=c(1,1,0,5,6,4),
X2=c(4,3,4,1,2,0),
Init=c(1,2,1,2,1,2)
)
df$clust <- df$Init
centroid1 <- c(mean(df$X1[df$clust==1]),
mean(df$X2[df$clust==1]))
centroid2 <- c(mean(df$X1[df$clust==2]),
mean(df$X2[df$clust==2]))
df$dist1 <- (df$X1 - centroid1[1])^2 + (df$X2 - centroid1[2])^2
df$dist2 <- (df$X1 - centroid2[1])^2 + (df$X2 - centroid2[2])^2
df$clust <- ifelse(df$dist1 < df$dist2, 1, 2)
plot(df$X1, df$X2, col=df$clust)
df <- data.frame(
Obs=1:6,
X1=c(1,1,0,5,6,4),
X2=c(4,3,4,1,2,0),
Init=c(1,2,1,2,1,2)
)
df <- data.frame(
Obs=1:6,
X1=c(1,1,0,5,6,4),
X2=c(4,3,4,1,2,0),
Init=c(1,2,1,2,1,2)
)
df$clust <- df$Init
# initial plot:
plot(df$X1, df$X2, col=df$clust)
# centroid and distance calculation:
centroid1 <- c(mean(df$X1[df$clust==1]),
mean(df$X2[df$clust==1]))
centroid2 <- c(mean(df$X1[df$clust==2]),
mean(df$X2[df$clust==2]))
df$dist1 <- (df$X1 - centroid1[1])^2 + (df$X2 - centroid1[2])^2
df$dist2 <- (df$X1 - centroid2[1])^2 + (df$X2 - centroid2[2])^2
# assign new cluster based on lower distance:
df$clust <- ifelse(df$dist1 < df$dist2, 1, 2)
plot(df$X1, df$X2, col=df$clust)
# centroid and distance calculation:
centroid1 <- c(mean(df$X1[df$clust==1]),
mean(df$X2[df$clust==1]))
centroid2 <- c(mean(df$X1[df$clust==2]),
mean(df$X2[df$clust==2]))
df$dist1 <- (df$X1 - centroid1[1])^2 + (df$X2 - centroid1[2])^2
df$dist2 <- (df$X1 - centroid2[1])^2 + (df$X2 - centroid2[2])^2
# assign new cluster based on lower distance:
df$clust <- ifelse(df$dist1 < df$dist2, 1, 2)
plot(df$X1, df$X2, col=df$clust)
# Beuth University of Applied Sciences, Berlin
# Data Science Master's Program
# Semester: 2
# Course: Data Visualization
#######################################
### Exercise 1: Dimension Reduction ###
#######################################
setwd("~/git-reps/visualization/E01")
par(mfrow=c(2, 3)) # plot the following plots side-by-side
#######################################
### Task 1: Mapping European Cities ###
#######################################
# See also: https://www.r-statistics.com/2016/01/multidimensional-scaling-with-r-from-mastering-data-analysis-with-r/
?eurodist
length(eurodist)
head(eurodist)
summary(eurodist)
as.matrix(eurodist)[1:5, 1:5]
dim(as.matrix(eurodist))
### i. Create mapping positions for the 21 cities, using classical MDS.
mds <- cmdscale(eurodist) # performs multi-dimensional scaling with principal components
### ii. Explore the differences between mapped and original distances (some seem weird!).
dist.ed <- as.matrix(eurodist)
dist.mds <- as.matrix(dist(mds))
dist.diff <- dist.ed - dist.mds
dist.ed[1:5, 1:5]
dist.mds[1:5, 1:5]
dist.diff[1:5, 1:5]
sort(dist.diff[rank(dist.diff) <= 10])
sort(dist.diff[rank(-dist.diff) <= 10], decreasing=TRUE)
# convert to "flat" data frame:
dim (dist.diff)
df <- data.frame(row = rep(1:21, 21), col = rep(1:21, each = 21), x = as.vector(dist.diff))
# order DESC:
dfd <- df[rev(order(df$x, na.last = FALSE)), ]
dfd[1:10, ]
# order ASC:
dfa <- df[order(df$x, na.last = FALSE), ]
dfa[1:10, ]
### iii. Plot the mapped cities (no plot symbols, city names centered on the plot position)
### without axis distortion (asp=1).
plot(mds, type = 'n', asp=1)
text(mds[, 1], mds[, 2], row.names(mds))
# alternative plot
# avoid overlaps in city names and suppress x and y axis labels and ticks
#library(ggplot2)
#ggplot(as.data.frame(mds), aes(V1, -V2, label = rownames(mds))) +
#       geom_text(check_overlap = TRUE) + theme_minimal() + xlab('') + ylab('') +
#       scale_y_continuous(breaks = NULL) + scale_x_continuous(breaks = NULL)
### iv. Compare the map to the actual geography, and obtain a (hand-crafted) rotation and/or reflection
### such that mapped locations reflect usual map layout as well as possible (similar to previous task).
# Reflection:
mds[, 2] <- mds[, 2] * -1 # *-1 = reflection => exchange north and south
plot(mds, type = 'n', asp=1)
text(mds[, 1], mds[, 2], labels(eurodist), col="blue")
# Rotation:
angle <- 30/180
rot <- rbind(c(cos(angle), -sin(angle))
, c(sin(angle), cos(angle))) # clockwise rotation matrix
dim(mds)
dim(rot)
mds.rot <- mds %*% rot # apply rotation matrix transformation
plot(mds.rot, type = 'n', asp=1)
text(mds.rot[, 1], mds.rot[, 2], labels(eurodist), col="navyblue")
text(mds[, 1], mds[, 2], labels(eurodist), col="blue")
### v. Create an overlay plot:
## Draw geo coordinates of the cities (see file provided in moodle)
## into a coordinate system with lat 30 to 65, lon -15 to 30.
load("GeoEurocities.RData")
plot(geodat$lat, geodat$lon, xlim=c(30,65), ylim=c(-15,30), asp=1)
text(geodat$lat, geodat$lon, geodat$city, pos=4, cex=0.8)
## Overlay the mapping onto this map.
# For the scaling in v, rescale scaled versions of the mapping (function scale) with
# the scale information of the geo coordinates that can e.g. be obtained from the
# attributes “scaled:center” and “scaled:scale” of the result of applying function scale.
mds.scaled = scale(mds, center=TRUE, scale=TRUE) # Malte: "stinknormale Z-Standardisierung"
geodat.scaled = scale(geodat[,10:11], center=TRUE, scale=TRUE)
# plot scaled geodat coordinates:
plot(geodat.scaled, col="seagreen", pch=19, asp=1)
text(geodat.scaled[, 1], geodat.scaled[, 2], labels(eurodist), pos=4, cex=0.8, col="seagreen")
# plot rescaled MDS coordinates:
points(mds.scaled, col="red", pch=19)
text(mds.scaled[, 1], mds.scaled[, 2], labels(eurodist), pos=4, cex=0.8, col="red")
## Draw connecting lines between mapped points and the respective geo location for each mapping.
# The segments function can be used for drawing the connecting lines in v:
segments(mds.scaled[, 1], mds.scaled[, 2], geodat.scaled[, 1], geodat.scaled[, 2], col="grey")
par(mfrow=c(1, 1)) # reset parameter to single plot
summary(iris)
d <- dist(iris[,1:4]) # euclidean distances between the rows
summary(iris)
d <- dist(iris[,1:4]) # euclidean distances between the rows
fit <- cmdscale(d,eig=TRUE, k=2) # k is the number of dim
fit # view results
View(fit)
# plot solution
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2", main="Metric MDS", type="n")
text(x, y, labels = iris$Species, cex=.7)
pcs <- prcomp(iris[,1:4])
par(mfrow=c(2,2))
biplot(pcs, pc.biplot = TRUE, cex=0.8, add=TRUE, xaxt="n", yaxt="n", main="iris data, covariance based", xpd=NA)
par(mfrow=c(1,1))
biplot(pcs, pc.biplot = TRUE, cex=0.8, add=TRUE, xaxt="n", yaxt="n", main="iris data, covariance based", xpd=NA)
biplot(pcs, pc.biplot = TRUE, cex=0.8, add=TRUE, xaxt="n", yaxt="n", main="iris data, covariance based", xpd=NA)
par(mfrow=c(1,2))
biplot(pcs, pc.biplot = TRUE, cex=0.8, add=TRUE, xaxt="n", yaxt="n", main="iris data, covariance based", xpd=NA)
## now with correlations
biplot(pcs, pc.biplot = TRUE, cex=0.8, add=TRUE, xaxt="n", yaxt="n", main="iris data, correlation based", xpd=NA)
symbols(0,y=0,circles=1, inches=FALSE, add=TRUE, fg="red", xpd=NA)
pcs <- prcomp(iris[,1:4])
par(mfrow=c(1,2))
biplot(pcs, pc.biplot = TRUE, cex=0.8, add=TRUE, xaxt="n", yaxt="n", main="iris data, covariance based", xpd=NA)
## now with correlations
pcs <- prcomp(decathlonComplete[,6:15], scale.=TRUE)
biplot(pcs, pc.biplot = TRUE, cex=0.8, add=TRUE, xaxt="n", yaxt="n", main="iris data, correlation based", xpd=NA)
symbols(0,y=0,circles=1, inches=FALSE, add=TRUE, fg="red", xpd=NA)
pcs <- prcomp(iris[,1:4])
par(mfrow=c(1,2))
biplot(pcs, pc.biplot = TRUE, cex=0.8, add=TRUE, xaxt="n", yaxt="n", main="iris data, covariance based", xpd=NA)
## now with correlations
pcs.scaled <- prcomp(decathlonComplete[,6:15], scale.=TRUE)
biplot(pcs.scaled, pc.biplot = TRUE, cex=0.8, add=TRUE, xaxt="n", yaxt="n", main="iris data, correlation based", xpd=NA)
symbols(0,y=0,circles=1, inches=FALSE, add=TRUE, fg="red", xpd=NA)
par(mfrow=c(1,1))
pcs <- prcomp(iris[,1:4])
par(mfrow=c(1,2))
biplot(pcs, pc.biplot = TRUE, cex=0.8, add=TRUE, xaxt="n", yaxt="n", main="iris data, covariance based", xpd=NA)
## now with correlations
pcs.scaled <- prcomp(decathlonComplete[,6:15], scale.=TRUE)
biplot(pcs.scaled, pc.biplot = TRUE, cex=0.8, add=TRUE, xaxt="n", yaxt="n", main="iris data, correlation based", xpd=NA)
symbols(0,y=0,circles=1, inches=FALSE, add=TRUE, fg="red", xpd=NA)
pcs <- prcomp(iris[,1:4])
par(mfrow=c(1,2))
biplot(pcs, pc.biplot = TRUE, cex=0.8, add=TRUE, xaxt="n", yaxt="n", main="iris data, covariance based", xpd=NA)
## now with correlations
pcs.scaled <- prcomp(iris[,1:4], scale.=TRUE)
biplot(pcs.scaled, pc.biplot = TRUE, cex=0.8, add=TRUE, xaxt="n", yaxt="n", main="iris data, correlation based", xpd=NA)
symbols(0,y=0,circles=1, inches=FALSE, add=TRUE, fg="red", xpd=NA)
